package com.company;

/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */
public class EvenFibonachiNumber {

    // Index limit for fibonachni sequence given that max term can not be more then 4000000
    private static final int FIBONACHI_TERM_LIMIT = 100;

    public EvenFibonachiNumber() {
    }

    public void run() {
        int[] memo = new int[FIBONACHI_TERM_LIMIT+1];
        // build an array of fibonachi numbers recursively with memoization
        fibonachiRec(FIBONACHI_TERM_LIMIT, memo);
        // sum even elements
        long sumOfEvenNumbers = sumEven(memo);
        System.out.println("Result: " + sumOfEvenNumbers);
    }

    private int fibonachiRec(int current, int[] memo) {
        if (current == 0) {
            return 0;
        }
        if (current == 1 || current == 2) {
            return 1;
        }
        if (memo[current] == 0) {
            memo[current] = fibonachiRec(current - 1, memo) + fibonachiRec(current - 2, memo);
            // Remove long out of range numbers
            if (memo[current] < 0) {
                memo[current] = 0;
            }
        }
        return memo[current];
    }

    private long sumEven(int[] memo) {
        long sumOfEvenNumbers = 0;
        for (long elem: memo) {
            System.out.println("elem: " + elem);
            // Limit from the task
            if (elem != 0 && elem % 2 == 0 && elem < 4000000) {
                sumOfEvenNumbers += elem;
            }
            System.out.println("sumOfEvenNumbers: " + sumOfEvenNumbers);
        }
        return sumOfEvenNumbers;
    }
}
